"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/bookmarks",{

/***/ "./pages/bookmarks.js":
/*!****************************!*\
  !*** ./pages/bookmarks.js ***!
  \****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! axios */ \"./node_modules/axios/lib/axios.js\");\n/* harmony import */ var _context_AuthContext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../context/AuthContext */ \"./context/AuthContext.js\");\n/* harmony import */ var _firebaseConfig__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../firebaseConfig */ \"./firebaseConfig.js\");\n// // // import React, { useState, useEffect } from \"react\";\n// // // import { useAuth } from \"../context/AuthContext\";\n// // // import { firestore } from \"../firebaseConfig\";\n// // // import axios from \"axios\";\n// // // import Link from \"next/link\";\n// // // const BookmarksPage = () => {\n// // //   const { currentUser } = useAuth();\n// // //   const [bookmarkedItems, setBookmarkedItems] = useState([]);\n// // //   const API_KEY = process.env.NEXT_PUBLIC_TMDB_API_KEY;\n// // //   useEffect(() => {\n// // //     if (!currentUser) return;\n// // //     const fetchBookmarks = async () => {\n// // //       const bookmarkRef = firestore\n// // //         .collection(\"bookmarks\")\n// // //         .doc(currentUser.uid);\n// // //       const doc = await bookmarkRef.get();\n// // //       if (doc.exists) {\n// // //         const bookmarksData = doc.data();\n// // //         const movies = bookmarksData.movies || [];\n// // //         const animes = bookmarksData.animes || [];\n// // //         const allBookmarks = [\n// // //           ...movies.map((id) => ({ id, type: \"movies\" })),\n// // //           ...animes.map((id) => ({ id, type: \"anime\" })),\n// // //         ];\n// // //         const details = await Promise.all(\n// // //           allBookmarks.map(async (item) => {\n// // //             try {\n// // //               const response = await axios.get(\n// // //                 `https://api.themoviedb.org/3/${\n// // //                   item.type === \"movies\" ? \"movie\" : \"tv\"\n// // //                 }/${item.id}?api_key=${API_KEY}&language=ja-JP`\n// // //               );\n// // //               return { ...response.data, type: item.type }; // Include type to distinguish between movie and tv\n// // //             } catch (error) {\n// // //               console.error(\"Error fetching details: \", error);\n// // //               return null;\n// // //             }\n// // //           })\n// // //         );\n// // //         setBookmarkedItems(details.filter(Boolean)); // Remove any null values\n// // //       }\n// // //     };\n// // //     fetchBookmarks();\n// // //   }, [currentUser, API_KEY]);\n// // //   return (\n// // //     <div className=\"w-11/12 mx-auto mt-5 pb-10\">\n// // //       <h2 className=\"text-xl font-bold my-4\">ブックマーク</h2>\n// // //       <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n// // //         {bookmarkedItems.map((item, index) => (\n// // //           <div key={index} className=\"mb-4\">\n// // //             <Link href={`/${item.type}/${item.id}`}>\n// // //               <img\n// // //                 src={`https://image.tmdb.org/t/p/w500${item.poster_path}`}\n// // //                 alt={item.title || item.name}\n// // //                 className=\"w-full h-auto rounded-md\"\n// // //               />\n// // //             </Link>\n// // //           </div>\n// // //         ))}\n// // //       </div>\n// // //     </div>\n// // //   );\n// // // };\n// // // export default BookmarksPage;\n// // import React, { useState, useEffect } from \"react\";\n// // import { useAuth } from \"../context/AuthContext\";\n// // import { firestore } from \"../firebaseConfig\";\n// // import axios from \"axios\";\n// // import Link from \"next/link\";\n// // const BookmarksPage = () => {\n// //   const { currentUser } = useAuth();\n// //   const [bookmarkedItems, setBookmarkedItems] = useState([]);\n// //   const API_KEY = process.env.NEXT_PUBLIC_TMDB_API_KEY;\n// //   useEffect(() => {\n// //     if (!currentUser) return;\n// //     const fetchBookmarks = async () => {\n// //       const bookmarkRef = firestore\n// //         .collection(\"bookmarks\")\n// //         .doc(currentUser.uid);\n// //       const doc = await bookmarkRef.get();\n// //       if (doc.exists) {\n// //         const bookmarksData = doc.data();\n// //         const movies = bookmarksData.movies || [];\n// //         const animes = bookmarksData.animes || [];\n// //         const allBookmarks = [...movies, ...animes];\n// //         const details = await Promise.all(\n// //           allBookmarks.map(async (id) => {\n// //             try {\n// //               // 映画の詳細を取得\n// //               const movieResponse = await axios.get(\n// //                 `https://api.themoviedb.org/3/movie/${id}?api_key=${API_KEY}&language=ja-JP`\n// //               );\n// //               return { ...movieResponse.data, type: \"movies\" };\n// //             } catch (error) {\n// //               // 映画が見つからない場合は、アニメとして試みる\n// //               try {\n// //                 const animeResponse = await axios.get(\n// //                   `https://api.themoviedb.org/3/tv/${id}?api_key=${API_KEY}&language=ja-JP`\n// //                 );\n// //                 return { ...animeResponse.data, type: \"anime\" };\n// //               } catch (innerError) {\n// //                 // どちらも見つからない場合はnullを返す\n// //                 console.error(\"Error fetching details: \", innerError);\n// //                 return null;\n// //               }\n// //             }\n// //           })\n// //         );\n// //         setBookmarkedItems(details.filter(Boolean)); // Remove any null values\n// //       }\n// //     };\n// //     fetchBookmarks();\n// //   }, [currentUser, API_KEY]);\n// //   // タイトルまたは名前でソートされたブックマークを表示\n// //   const sortedBookmarks = bookmarkedItems.sort((a, b) => {\n// //     // 映画のタイトルがない場合はアニメの名前を使用\n// //     const titleA = a.title || a.name || \"\";\n// //     const titleB = b.title || b.name || \"\";\n// //     return titleA.localeCompare(titleB);\n// //   });\n// //   return (\n// //     <div className=\"w-11/12 mx-auto mt-5 pb-10\">\n// //       <h2 className=\"text-xl font-bold my-4\">ブックマーク</h2>\n// //       <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n// //         {sortedBookmarks.map((item, index) => (\n// //           <div key={index} className=\"mb-4\">\n// //             <Link\n// //               href={`/${item.type === \"movies\" ? \"movies\" : \"anime\"}/${\n// //                 item.id\n// //               }`}\n// //             >\n// //               <img\n// //                 src={`https://image.tmdb.org/t/p/w500${item.poster_path}`}\n// //                 alt={item.title || item.name}\n// //                 className=\"w-full h-auto rounded-md\"\n// //               />\n// //             </Link>\n// //           </div>\n// //         ))}\n// //       </div>\n// //     </div>\n// //   );\n// // };\n// // export default BookmarksPage;\n// import React, { useState, useEffect } from \"react\";\n// import { useAuth } from \"../context/AuthContext\";\n// import { firestore } from \"../firebaseConfig\";\n// import axios from \"axios\";\n// import Link from \"next/link\";\n// const BookmarksPage = () => {\n//   const { currentUser } = useAuth();\n//   const [bookmarks, setBookmarks] = useState([]);\n//   const API_KEY = process.env.NEXT_PUBLIC_TMDB_API_KEY;\n//   // useEffect(() => {\n//   //   const fetchBookmarks = async () => {\n//   //     if (!currentUser) return;\n//   //     const bookmarkRef = firestore\n//   //       .collection(\"bookmarks\")\n//   //       .doc(currentUser.uid);\n//   //     const doc = await bookmarkRef.get();\n//   //     if (doc.exists) {\n//   //       const { movies, animes } = doc.data();\n//   //       // 各ブックマークにタイプを追加して統合\n//   //       // const combinedBookmarks = [\n//   //       //   ...movies.map((movie) => ({ ...movie, type: \"movie\" })),\n//   //       //   ...animes.map((anime) => ({ ...anime, type: \"anime\" })),\n//   //       // ];\n//   //       const combinedBookmarks = [\n//   //         ...movies.map((id) => ({ id, type: \"movie\" })),\n//   //         ...animes.map((id) => ({ id, type: \"anime\" })),\n//   //       ];\n//   //       console.log(combinedBookmarks);\n//   //       // IDとタイプを基に詳細情報を取得\n//   //       const bookmarkDetails = await Promise.all(\n//   //         combinedBookmarks.map(async (item) => {\n//   //           const url = `https://api.themoviedb.org/3/${\n//   //             item.type === \"movie\" ? \"movie\" : \"tv\"\n//   //           }/${item.id}?api_key=${API_KEY}&language=ja-JP`;\n//   //           try {\n//   //             const response = await axios.get(url);\n//   //             // APIから取得したデータにブックマークのタイプを追加\n//   //             return { ...response.data, type: item.type };\n//   //           } catch (error) {\n//   //             console.error(\"Error fetching details:\", error);\n//   //             return null;\n//   //           }\n//   //         })\n//   //       );\n//   //       // nullを除外し、ブックマーク日付でソート\n//   //       const validBookmarks = bookmarkDetails.filter(\n//   //         (detail) => detail !== null\n//   //       );\n//   //       const sortedBookmarks = validBookmarks.sort(\n//   //         (a, b) => new Date(b.bookmarkDate) - new Date(a.bookmarkDate)\n//   //       );\n//   //       console.log(sortedBookmarks); // データ取得後のブックマークを確認する\n//   //       setBookmarks(sortedBookmarks);\n//   //     }\n//   //   };\n//   //   if (currentUser) {\n//   //     fetchBookmarks();\n//   //   }\n//   // }, [currentUser, API_KEY]);\n//   useEffect(() => {\n//     const fetchBookmarks = async () => {\n//       if (!currentUser) return;\n//       const bookmarkRef = firestore\n//         .collection(\"bookmarks\")\n//         .doc(currentUser.uid);\n//       const doc = await bookmarkRef.get();\n//       if (doc.exists) {\n//         const bookmarks = doc.data().bookmarks || [];\n//         // タイムスタンプでソート\n//         const sortedBookmarks = bookmarks.sort(\n//           (a, b) => new Date(b.timestamp) - new Date(a.timestamp)\n//         );\n//         // ソートされたブックマークで状態を更新\n//         setBookmarks(sortedBookmarks);\n//       }\n//     };\n//     fetchBookmarks();\n//   }, [currentUser]);\n//   return (\n//     <div className=\"w-11/12 mx-auto mt-5 pb-10\">\n//       <h2 className=\"text-xl font-bold my-4\">ブックマーク</h2>\n//       <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n//         {bookmarks.map((bookmark, index) => (\n//           <div key={index} className=\"mb-4\">\n//             <Link\n//               href={`/${bookmark.type === \"movie\" ? \"movies\" : \"anime\"}/${\n//                 bookmark.id\n//               }`}\n//             >\n//               <img\n//                 src={`https://image.tmdb.org/t/p/original${bookmark.poster_path}`}\n//                 alt={bookmark.title || bookmark.name}\n//                 className=\"w-full h-auto rounded-md\"\n//               />\n//             </Link>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n// export default BookmarksPage;\n\nvar _s = $RefreshSig$();\n\n\n\n\nconst BookmarksPage = ()=>{\n    _s();\n    const { currentUser } = (0,_context_AuthContext__WEBPACK_IMPORTED_MODULE_2__.useAuth)();\n    const [bookmarks, setBookmarks] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const API_KEY = \"29ddb4606480823262ca1015b1993619\";\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const fetchBookmarks = async ()=>{\n            if (!currentUser) return;\n            const bookmarkRef = _firebaseConfig__WEBPACK_IMPORTED_MODULE_3__.firestore.collection(\"bookmarks\").doc(currentUser.uid);\n            const doc = await bookmarkRef.get();\n            if (doc.exists) {\n                const bookmarksData = doc.data().bookmarks || [];\n                // IDとタイプを基に詳細情報を取得\n                const details = await Promise.all(bookmarksData.map(async (bookmark)=>{\n                    const url = \"https://api.themoviedb.org/3/\".concat(bookmark.type === \"movie\" ? \"movie\" : \"tv\", \"/\").concat(bookmark.id, \"?api_key=\").concat(API_KEY, \"&language=ja-JP\");\n                    try {\n                        const response = await axios__WEBPACK_IMPORTED_MODULE_4__[\"default\"].get(url);\n                        return {\n                            ...response.data,\n                            ...bookmark\n                        }; // APIの応答とブックマークデータを組み合わせる\n                    } catch (error) {\n                        console.error(\"Error fetching details:\", error);\n                        return null;\n                    }\n                }));\n                // nullを除外し、ブックマーク日付でソート\n                const validBookmarks = details.filter((detail)=>detail !== null);\n                const sortedBookmarks = validBookmarks.sort((a, b)=>new Date(b.timestamp) - new Date(a.timestamp));\n                setBookmarks(sortedBookmarks);\n            }\n        };\n        fetchBookmarks();\n    }, [\n        currentUser,\n        API_KEY\n    ]);\n    // ここにブックマークデータを表示するロジックを追加\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        children: bookmarks.map((bookmark, index)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                    children: bookmark.poster_path || bookmark.name\n                }, void 0, false, {\n                    fileName: \"/Users/it222206/Desktop/my-next-tmdb-app/pages/bookmarks.js\",\n                    lineNumber: 344,\n                    columnNumber: 11\n                }, undefined)\n            }, index, false, {\n                fileName: \"/Users/it222206/Desktop/my-next-tmdb-app/pages/bookmarks.js\",\n                lineNumber: 342,\n                columnNumber: 9\n            }, undefined))\n    }, void 0, false, {\n        fileName: \"/Users/it222206/Desktop/my-next-tmdb-app/pages/bookmarks.js\",\n        lineNumber: 339,\n        columnNumber: 5\n    }, undefined);\n};\n_s(BookmarksPage, \"HFcgKGDAa1mc597itMAE0KJA4tk=\", false, function() {\n    return [\n        _context_AuthContext__WEBPACK_IMPORTED_MODULE_2__.useAuth\n    ];\n});\n_c = BookmarksPage;\n/* harmony default export */ __webpack_exports__[\"default\"] = (BookmarksPage);\nvar _c;\n$RefreshReg$(_c, \"BookmarksPage\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./pages/bookmarks.js\n"));

/***/ })

});